for(n in c(0,1,2,3,4,5,6,7)) {x = sum(x,  ppois(n, lambda) * ppois(7-n, lambda))}
x
for(n in c(0,1,2,3,4,5,6,7)) {for(m in 0:n) {x = sum(x,  ppois(m, lambda) * ppois(m-n, lambda))}}
lambda=3
x=0
for(n in c(0,1,2,3,4,5,6,7)) {for(m in 0:n) {x = sum(x,  ppois(m, lambda) * ppois(m-n, lambda))}}
x
subset(iris, Species == 'versicolor')
subset(iris, Species == 'versicolor')> shapiro.test(iris$Sepal.Length)
qqnorm(iris$Sepal.Length)
qqline(iris$Sepal.Length)
qqnorm(iris$Sepal.Length)
qqline(iris$Sepal.Length)
qqline(pnorm())
x <- seq(0, 100, length=101)
qqline(pnorm(x,0,1))
qqline(pnorm(x,0,1))
qqnorm(pnorm(x,0,1))
qqline(pnorm(x,0,1))
shapiro.test(pnorm(x,0,1)
)
shapiro.test(iris$Sepal.Length)
shapiro.test(x)
qqnorm(x)
qqline(x)
qqline(x)
x
data <- rpois(1000, 3)
data
shapiro.test(data)
qqline(data)
qqline(data)
qqnorm(x)
qqnorm(data)
qqnorm(data)
qqline(data)
data <- rpois(1000, 10)
qqnorm(x)
data <- rpois(100, 10)
qqnorm(data)
qqline(data)
data <- rpois(10000, 1000)
qqnorm(data)
qqline(data)
data <- rpois(10, 1000)
qqnorm(data)
qqline(data)
data*data
data
data2=c(data*data*data, data*data, data)
qqnorm(data2)
qqline(data2)
shapiro.test(data2)
shapiro.test(iris$Sepal.Length)
shapiro.test(x)
shapiro.test(data)
> qqnorm(iris$Sepal.Length)
> qqline(iris$Sepal.Length)
qqnorm(iris$Sepal.Length)
qqline(iris$Sepal.Length)
subset(iris, Species == 'versicolor')
dataB <- subset(iris, Species == 'versicolor')
dataB
dataB
dataB <- subset(iris, Species == 'versicolor')
mean(dataB)
mean(dataB$Petal.Length)
sd(dataB$Petal.Length)
quantile(dataB$Petal.Length, 0.25)
qnorm(0.25, mean(dataB$Petal.Length), sd(dataB$Petal.Length))
densityDataB <- density(dataB)
densityDataB <- density(dataB$Petal.Length)
dataC <- subset(iris, Species == 'versicolor')
densityDataC <- density(dataC$Petal.Length)
df <- approxfun(density(dataC$Petal.Length))
df
eval(df,4)
density()
lengthC <- dataC$Petal.Length
length(lengthC[4>=lengthC])/length(lengthC)
dataC <- subset(iris, Species == 'versicolor')
lengthC <- dataC$Petal.Length
length( lengthC[4 >= lengthC] ) / length( lengthC )
mean(lengthC)
sd(lengthC)
pnorm(4, mean(lengthC), sd(lengthC))
dataD <- subset(iris, Species == 'Setosa')
lengthD <- dataD$Petal.Length
length( lengthD[4 >= lengthD] ) / length( lengthD )
View(dataD)
dataD <- subset(iris, Species == 'setosa')
lengthD <- dataD$Petal.Length
length( lengthD[4 >= lengthD] ) / length( lengthD )
View(dataD)
View(dataD)
length( lengthD[4 >= lengthD] ) / length( lengthD )
mean(lengthD)
sd(lengthD)
pnorm(4, mean(lengthD), sd(lengthD))
view(lengthC)
view(lengthC)
View(dataD)
View(dataC)
lengthD <- dataD$Petal.Length
pnorm(4, mean(lengthD), sd(lengthD))
1-pnorm(4, mean(lengthC), sd(lengthC))
1- length( lengthC[4 >= lengthC] ) / length( lengthC )
1-length( lengthD[4 >= lengthD] ) / length( lengthD )
dataC <- subset(iris, Species == 'virginica')
lengthC <- dataC$Petal.Length
length( lengthD[4 >= lengthD] ) / length( lengthD )
View(dataC)
View(dataC)
length( lengthC[4 >= lengthC] ) / length( lengthC )
1-length( lengthC[4 >= lengthC] ) / length( lengthC )
mean(lengthC)
sd(lengthC)
1-pnorm(4, mean(lengthC), sd(lengthC))
dataE <- subset(iris, Species == 'virginica')
View(dataE)
View(dataE)
dataE <- subset(iris, Species == 'virginica')
lenEsep <- dataE$Sepal.Length
widEsep <- dataE$Sepal.Width
length( lenEsep[lenEsep >= 8 | lenEsep <= 4.8] ) / length( lenEsep )
length( lenEsep[lenEsep >= 8 || lenEsep <= 4.8] ) / length( lenEsep )
length( widEsep[widEsep >= 8 || widEsep <= 4.8] ) / length( widEsep )
dataE <- subset(iris, Species == 'virginica')
lenEsep <- dataE$Sepal.Length
widEsep <- dataE$Sepal.Width
length( lenEsep[lenEsep >= 8 || lenEsep <= 4.8] ) / length( lenEsep )
length( widEsep[widEsep >= 8 || widEsep <= 4.8] ) / length( widEsep )
mean(lenEsep)
sd(lenEsep)
pnorm(4.8, mean(lenEsep), sd(lenEsep)) + pnorm(8, mean(lenEsep), sd(lenEsep), lower.tail = FALSE)
mean(widEsep)
sd(widEsep)
pnorm(4.8, mean(widEsep), sd(widEsep)) + pnorm(8, mean(widEsep), sd(widEsep), lower.tail = FALSE)
dataA <- iris$Sepal.Length
data0 <- iris
View(data0)
save.image("~/Documents/School/TCSS 551 - Big Data Analytics/Assignments/Homework-1/iris-Sepal Length data.RData")
write.csv(data0, file="iris-Sepal Length-data.csv")
write.csv(dataA, file="iris-Sepal Length-data.csv")
dataB <- subset(iris, Species == ’versicolor’)
dataB <- subset(iris, Species == ’versicolor’)
iris
dataB <- subset(iris, Species == ’versicolor’)
dataB <- subset(iris, Species == ’versicolor’)
dataB <- subset(iris, Species == ’versicolor’)
dataB <- subset(iris, Species == 'versicolor')
write.csv(dataB$Petal.Length, file="iris-versicolor-Petal Length-data.csv")
dataC <- subset(iris, Species == 'virginica')
write.csv(dataC$Petal.Length, file="iris-virginica-Petal Length-data.csv")
dataD <- subset(iris, Species == 'setosa')
write.csv(dataD$Petal.Length, file="iris-setosa-Petal Length-data.csv")
dataE <- subset(iris, Species == 'virginica')
lenEsep <- dataE$Sepal.Length
widEsep <- dataE$Sepal.Width
write.csv(dataE$Sepal.Length, file="iris-virginica-Sepal Length-data.csv")
write.csv(dataE$Sepal.Width, file="iris-virginica-Sepal Width-data.csv")
load("~/Downloads/blood_pressure.txt")
load("~/Downloads/blood_pressure.txt")
load("~/Downloads/blood_pressure.txt")
read.table("/Users/jamster/Downloads/blood_pressure.txt", header = TRUE) -> abp
head(abp)
View(abp)
View(abp)
abp2 <- abp[-c(2),]
head(abp2)
abline(lm(abp2$blood_pressure~apb2$age))
abline(lm(abp2$blood_pressure~abp2$age))
plot(abp2$blood_pressure~abp2$age)
abline(lm(abp2$blood_pressure~abp2$age))
summary(lm(abp2$blood_pressure~abp2$age))
pnorm(50, 45, 10)
pnorm(50, 55, 40)
clearIO
clear()
qnorm(0.025)
45 qnorm(0.025)
45 + qnorm(0.025)*(10/sqrt(50))
45 - qnorm(0.025)*(10/sqrt(50))
55 + qnorm(0.025)*(40/sqrt(50))
55 - qnorm(0.025)*(40/sqrt(50))
x <- seq(-10,10, length=10001)
fx <- dnorm(x, 45, 10)
gx <- dnorm(x, 55, 40)
plot(x, fx, type = "1")
plot(x, fx, type =1)
plot(x, fx, type="1")
plot(x, fx)
x <- seq(-10,90, length=10001)
fx <- dnorm(x, 45, 10)
gx <- dnorm(x, 55, 40)
plot(x, fx)
plot(x, gx)
plot(x, gx)
3.8 + qnorm(0.025)*(0.26/sqrt(2000))
3.8 - qnorm(0.025)*(0.26/sqrt(2000))
3.8 + qnorm(0.005)*(0.26/sqrt(2000))
3.8 - qnorm(0.005)*(0.26/sqrt(2000))
pnorm(3.785025, 3.8, 0.26) - pnorm(3.814975, 3.8, 0.26)
(qnorm(0.005)*(0.26/sqrt(2000)) - qnorm(0.005)*(0.26/sqrt(2000)))/2
(qnorm(0.005)*(0.26/sqrt(2000)) + qnorm(0.005)*(0.26/sqrt(2000)))/2
-(qnorm(0.005)*(0.26/sqrt(2000)) + qnorm(0.005)*(0.26/sqrt(2000)))/2
pnorm(4, 3.8, 0.26)
(4-3.8)/(0.26/sqrt(2000))
4.762/2
pt(34.4,95)
pt(34.4,99)
pt(34.4,99)
qnorm(34.5)
12.17 + qnorm(0.025)*(4.02/sqrt(37129))
12.17 - qnorm(0.025)*(4.02/sqrt(37129))
12.92 + qnorm(0.025)*(4.12/sqrt(36918))
12.92 - qnorm(0.025)*(4.12/sqrt(36918))
qt(0.025,36918+37129-2)
qt(0.005,36918+37129-2)
2*pt(1-20.5437,36918+37129-2)
2*pt(-20.5437,36918+37129-2)
2*pt(20.5437-1,36918+37129-2)
2*pt(-20.5437,36918+37129-2)
2*pt(1-20.5437,36918+37129-2)
mydata = read.table("clipboard", header=TRUE, sep="\t")
"mydata = read.table("/Users/jamster/Downloads/MidTerm-Prob5-data.txt", header=TRUE, sep="\t")
mydata = read.table("/Users/jamster/Downloads/MidTerm-Prob5-data.txt", header=TRUE, sep="\t")
View(mydata)
View(mydata)
modelA <- lm(mydata$Length~mydata$Pollutant.A)
summary(modelA)
modelB <- lm(mydata$Length~mydata$Pollutant.B)
summary(modelB)
plot(mydata$Pollutant.A,mydata$Length)
plot(mydata$Length,mydata$Pollutant.A)
plot(mydata$Length,mydata$Pollutant.B)
myDataA <- mydata[ -c()]
mydata = read.table("/Users/jamster/Downloads/MidTerm-Prob5-data.txt", header=TRUE, sep="\t")
modelA <- lm(mydata$Length~mydata$Pollutant.A)
modelB <- lm(mydata$Length~mydata$Pollutant.B)
summary(modelA)
summary(modelB)
plot(mydata$Length,mydata$Pollutant.A)
plot(mydata$Pollutant.A,mydata$Length)
plot(mydata$Pollutant.B,mydata$Length)
csvIN = csv.read("/Users/jamster/Downloads/tweets.csv")
csvIN = read.csv("/Users/jamster/Downloads/tweets.csv")
genuine <- csvIN$text
test <- genuine[2]
test <- genuine[c(2_]
test <- genuine[c(2)]
test = genuine[c(2)]
View(csvIN)
load("/Users/jamster/Desktop/temp.RData")
load("~/Desktop/IR-Project/FakeProject-data/R-Studio - SentimentAnalysis package.RData")
library(tidytext)
sentiments
plot(cars)
install.packages("httr")
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
library(sparklyr)
library(dplyr)
spark_install(version = "2.1.0", hadoop_version = "2.7")
sc <- spark_connect(master = "local")
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
install.packages(available.packages()[,1])
install.packages(available.packages()[, 1])
setwd("~/GitHub/IRproject")
install.packages("party")
library(party)
fake <- read.csv("fakeTrainData1.csv")
setwd("~/GitHub/IRproject/FakeProject-data/DataSubsetGens-R/0-init")
setwd("~/GitHub/IRproject/FakeProject-data/DataSubsetGens-R/0-init")
fake <- read.csv("fakeTrainData1.csv")
real <- read.csv("realTrainData1.csv")
df <- rbind(fake, real)
df.tree <- ctree(realFAKEcat ~ . , data = finaldata1[,-c(1)])
df.tree <- ctree(realFAKEcat ~ . , data = data1[,-c(1)])
df.tree <- ctree(realFAKEcat ~ . , data = data[,-c(1)])
df.tree <- ctree(realFAKEcat ~ . , data = df[,-c(1)])
plot(df.tree)
library(rpart)
df.part <- rpart(realFAKEcat ~., df[,-c(1)], na.action = na.rpart)
rpart.plot(df.part,digits=10,fallen.leaves=TRUE,type=4)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
rpart.plot(df.part,digits=10,fallen.leaves=TRUE,type=4)
real0 <- real
fake0 <- fake
real0$last <- as.numeric(1)
fake0$last <- as.numeric(0)
df0 <- rbind(fake0, real0)
df0.binom <- glm(df0$last ~ ., data = df0[,-c(1,12)],family = "binomial")
summary(df0.binom)
View(df0)
anova(df0.binom, test="Chisq")
test <- read.csv("testData1.csv")
test <- read.csv("testData.csv")
testFake <- filter(test, realFAKEcat=="fake")
View(test)
testFake <- filter(test, test$realFAKEcat=="fake")
testFake <- subset(test, test$realFAKEcat=="fake")
View(testFake)
testReal <- subset(test, test$realFAKEcat=="real")
testFake0 <- testFake
testReal0 <- testReal
testFake0$last <- as.numeric(0)
testReal0$last <- as.numeric(1)
tes0 <- rbind(testFake0, testReal0)
df0.binom.predict <- predict(df0.binom,newdata=subset(test0,select=-c(1,12)),type='response')
test0 <- rbind(testFake0, testReal0)
df0.binom.predict <- predict(df0.binom,newdata=subset(test0,select=-c(1,12)),type='response')
df0.binom.predict.res <- ifelse(df0.binom.predict > 0.5,1,0)
df0.binom.predict.ERR <- mean(df0.binom.predict.res != test0$last)
print(paste('Accuracy',1-df0.binom.predict.ERR))
fake <- read.csv("fakeTrainData1.csv")
real <- read.csv("realTrainData1.csv")
df <- rbind(fake, real)
library(party)
df.tree <- ctree(realFAKEcat ~ . , data = df[,-c(1)])
plot(df.tree)
library(rpart)
df.part <- rpart(realFAKEcat ~ joy + anger + sadness + trust + fear + negative + surprise + positive + disgust, df[,-c(1)], na.action = na.rpart)
library(rpart.plot)
rpart.plot(df.part,digits=10,fallen.leaves=TRUE,type=4)
test <- read.csv("testData1b.csv")
setwd("~/GitHub/IRproject/FakeProject-data/DataSubsetGens-R/B-real-bots")
anova(df0.binom, test="Chisq")
fake <- read.csv("fakeTrainData1b.csv")
real <- read.csv("realTrainData1b.csv")
df <- rbind(fake, real)
test <- read.csv("testData1b.csv")
testFake <- subset(test, test$realFAKEcat=="fake")
testReal <- subset(test, test$realFAKEcat=="real")
testFake0 <- testFake
testReal0 <- testReal
testFake0$last <- as.numeric(0)
testReal0$last <- as.numeric(1)
test0 <- rbind(testFake0, testReal0)
library(party)
df.tree <- ctree(realFAKEcat ~ . , data = df[,-c(1)])
plot(df.tree)
library(rpart)
df.part <- rpart(realFAKEcat ~ joy + anger + sadness + trust + fear + negative + surprise + positive + disgust, df[,-c(1)], na.action = na.rpart)
library(rpart.plot)
rpart.plot(df.part,digits=10,fallen.leaves=TRUE,type=4)
real0 <- real
fake0 <- fake
real0$last <- as.numeric(1)
fake0$last <- as.numeric(0)
df0 <- rbind(fake0, real0)
df0.binom <- glm(df0$last ~ ., data = df0[,-c(1,12)],family = "binomial")
summary(df0.binom)
anova(df0.binom, test="Chisq")
df0.binom.predict <- predict(df0.binom,newdata=subset(test0,select=-c(1,12)),type='response')
df0.binom.predict.res <- ifelse(df0.binom.predict > 0.5,1,0)
df0.binom.predict.ERR <- mean(df0.binom.predict.res != test0$last)
print(paste('Accuracy',1-df0.binom.predict.ERR))
source('~/GitHub/IRproject/testRunScript.R', echo=TRUE)
fake <- read.csv("fakeTrainData1b.csv")
real <- read.csv("realTrainData1b.csv")
df <- rbind(fake, real)
test <- read.csv("testData1b.csv")
testFake <- subset(test, test$realFAKEcat=="fake")
testReal <- subset(test, test$realFAKEcat=="real")
testFake0 <- testFake
testReal0 <- testReal
testFake0$last <- as.numeric(0)
testReal0$last <- as.numeric(1)
test0 <- rbind(testFake0, testReal0)
library(party)
df.tree <- ctree(realFAKEcat ~ . , data = df[,-c(1)])
plot(df.tree)
library(rpart)
df.part <- rpart(realFAKEcat ~ joy + anger + sadness + trust + fear + negative + surprise + positive + disgust, df[,-c(1)], na.action = na.rpart)
library(rpart.plot)
rpart.plot(df.part,digits=10,fallen.leaves=TRUE,type=4)
real0 <- real
fake0 <- fake
real0$last <- as.numeric(1)
fake0$last <- as.numeric(0)
df0 <- rbind(fake0, real0)
df0.binom <- glm(df0$last ~ ., data = df0[,-c(1,12)],family = "binomial")
summary(df0.binom)
anova(df0.binom, test="Chisq")
df0.binom.predict <- predict(df0.binom,newdata=subset(test0,select=-c(1,12)),type='response')
df0.binom.predict.res <- ifelse(df0.binom.predict > 0.5,1,0)
df0.binom.predict.ERR <- mean(df0.binom.predict.res != test0$last)
print(paste('Accuracy',1-df0.binom.predict.ERR))
plot(df.tree,fallen.leaves=TRUE,type=4)
plot(df.tree,type=4)
plot(df.tree)
df.tree.predict <- predict(df.tree,newdata=subset(test,select=-c(1)),type='response')
df.tree.predict.res <- ifelse(df.tree.predict > 0.5,1,0)
df.tree.predict.res <- ifelse(df.tree.predict > 0.5,"real","bot")
df.tree.predict.res <- ifelse(df.tree.predict == "real","real","bot")
df.tree.predict.ERR <- mean(df.tree.predict.res != test0$last)
df.tree.predict.res <- ifelse(df.tree.predict == 0,"real","bot")
df.tree.predict.ERR <- mean(df.tree.predict.res != test0$last)
library(randomForest)
df0.forest <- randomForest(realFAKEcat ~. , test)
df0.forest
df0.forest.predict <- predict(df0.forest,newdata=subset(test,select=-c(1)),type='response')
df0.forest.predict <- predict(df0.forest,newdata=subset(test,select=-c(1)),type='response')
df0.forest.predict <- predict(df0.forest,newdata=test,type='response')
df0.forest.predict.res <- ifelse(df0.forest.predict > 0.5,1,0)
df0.forest <- randomForest(realFAKEcat ~. , df[,-c(1)])
df0.forest <- randomForest(realFAKEcat ~. , df0[,-c(1,12)])
df0.forest <- randomForest(last ~. , df0[,-c(1,12)])
df0.forest <- randomForest(last ~. , df0,-c(1)], test$realFAKEcat, test[,-c(1)])
df0.forest <- randomForest(last ~. , df0[-c(1)], test$realFAKEcat, test[,-c(1)])
df0.forest <- randomForest(last ~. , df[-c(1)], test$realFAKEcat, test[,-c(1)])
df0.forest <- randomForest(realFAKEcat ~. , df0[-c(1)], test$realFAKEcat, test[,-c(1)])
df0.forest <- randomForest(realFAKEcat ~. , df[-c(1)], test$realFAKEcat, test[,-c(1)])
df0.forest <- randomForest(realFAKEcat ~. , df[,-c(1)], test$realFAKEcat, test[,-c(1)])
df0.forest <- randomForest(realFAKEcat ~. , df[,-c(1)], realFAKEcat, test[,-c(1)])
df0.forest <- randomForest(realFAKEcat ~. , df[,-c(1)], test$realFAKEcat, test[,-c(1)])
df0.forest <- randomForest(realFAKEcat ~. , df[,-c(1)], test$realFAKEcat, test[,-c(1,12)])
View(df)
df0.forest <- randomForest(df$realFAKEcat ~. , df[,-c(1)], test$realFAKEcat, test[,-c(1)])
df0.forest <- randomForest(realFAKEcat ~. , df[,-c(1)], realFAKEcat)
df0.forest <- randomForest(realFAKEcat ~. , df[,-c(1)])
predict(df0.forest,newdata = test[,features], type="prob")
predict(df0.forest,newdata = test[,"realFAKEcat"], type="prob")
predict(df0.forest,newdata = test[,-c(1)], type="prob")
df0.forest.pred <- predict(df0.forest,newdata = test[,-c(1)], type="prob")
tp = length(which(test[, factor] == "real" & df0.forest.pred[, 2] >= thresh))
setwd("~/GitHub/IRproject/FakeProject-data/DataSubsetGens-R/0-init")
library(party)
df.tree <- ctree(realFAKEcat ~ . , data = df[,-c(1)])
plot(df.tree)
tp = length(which(test[, factor] == "real" & df0.forest.pred[, 2] >= thresh))
library(party)
df.tree <- ctree(realFAKEcat ~ . , data = df[,-c(1)])
plot(df.tree)
library(party)
df.tree <- ctree(realFAKEcat ~ . , data = df[,-c(1)])
plot(df.tree)
plot(df.tree)
fake <- read.csv("fakeTrainData1b.csv")
real <- read.csv("realTrainData1b.csv")
df <- rbind(fake, real)
test <- read.csv("testData1b.csv")
testFake <- subset(test, test$realFAKEcat=="fake")
testReal <- subset(test, test$realFAKEcat=="real")
testFake0 <- testFake
testReal0 <- testReal
testFake0$last <- as.numeric(0)
testReal0$last <- as.numeric(1)
test0 <- rbind(testFake0, testReal0)
library(party)
df.tree <- ctree(realFAKEcat ~ . , data = df[,-c(1)])
plot(df.tree)
fake <- read.csv("fakeTrainData1.csv")
real <- read.csv("realTrainData1.csv")
df <- rbind(fake, real)
test <- read.csv("testData1b.csv")
testFake <- subset(test, test$realFAKEcat=="fake")
testReal <- subset(test, test$realFAKEcat=="real")
testFake0 <- testFake
testReal0 <- testReal
testFake0$last <- as.numeric(0)
testReal0$last <- as.numeric(1)
test0 <- rbind(testFake0, testReal0)
library(party)
df.tree <- ctree(realFAKEcat ~ . , data = df[,-c(1)])
plot(df.tree)
setwd("~/GitHub/IRproject/FakeProject-data/DataSubsetGens-R/0-init")
fake <- read.csv("fakeTrainData1.csv")
real <- read.csv("realTrainData1.csv")
df <- rbind(fake, real)
test <- read.csv("testData1b.csv")
testFake <- subset(test, test$realFAKEcat=="fake")
testReal <- subset(test, test$realFAKEcat=="real")
testFake0 <- testFake
testReal0 <- testReal
testFake0$last <- as.numeric(0)
testReal0$last <- as.numeric(1)
test0 <- rbind(testFake0, testReal0)
library(party)
df.tree <- ctree(realFAKEcat ~ . , data = df[,-c(1)])
plot(df.tree)
setwd("~/GitHub/IRproject/FakeProject-data/DataSubsetGens-R/B-real-bots")
fake <- read.csv("fakeTrainData1.csv")
real <- read.csv("realTrainData1.csv")
df <- rbind(fake, real)
test <- read.csv("testData1b.csv")
testFake <- subset(test, test$realFAKEcat=="fake")
testReal <- subset(test, test$realFAKEcat=="real")
testFake0 <- testFake
testReal0 <- testReal
testFake0$last <- as.numeric(0)
testReal0$last <- as.numeric(1)
test0 <- rbind(testFake0, testReal0)
library(party)
df.tree <- ctree(realFAKEcat ~ . , data = df[,-c(1)])
plot(df.tree)
real0 <- real
fake0 <- fake
real0$last <- as.numeric(1)
fake0$last <- as.numeric(0)
df0 <- rbind(fake0, real0)
df0.binom <- glm(df0$last ~ ., data = df0[,-c(1,12)],family = "binomial")
summary(df0.binom)
anova(df0.binom, test="Chisq")
df0.binom.predict <- predict(df0.binom,newdata=subset(test0,select=-c(1,12)),type='response')
df0.binom.predict.res <- ifelse(df0.binom.predict > 0.5,1,0)
df0.binom.predict.ERR <- mean(df0.binom.predict.res != test0$last)
print(paste('Accuracy',1-df0.binom.predict.ERR))
library(randomForest)
df0.forest <- randomForest(realFAKEcat ~. , test)
